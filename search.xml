<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python编程之API入门：一 使用百度地图API查地理坐标</title>
    <url>/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%B8%80-%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E6%9F%A5%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87/</url>
    <content><![CDATA[<p>在网络编程中，我们会和API打交道。那么，什么是API?如何使用API呢？本文分享了一下笔者对API的理解以及百度地图API的使用。</p>
<a id="more"></a>
<p>API是”Application Programming Interface（应用程序编程接口）”的缩写。如果那一大堆的术语和定义让你头晕，不妨试着这样理解：网络服务商（比如百度、微博等）存有大量数据，我们可以查询数据，但是需要按照一定的格式/协议，否则服务商不知道我们的需求无法进行处理，我们拿到数据也看不懂。通过API接口规范，通信双方都能明白对方传送的信息和数据，同时也简化了操作（只要按照规定的格式输入，就可以得到已知格式的输出，我们无需了解具体实现的技术细节，是不是很省心呢？）</p>
<p>下面以<a href="http://lbsyun.baidu.com/index.php?title=webapi" target="_blank" rel="noopener">百度地图Web服务API</a>的调用为例。</p>
<img src="/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%B8%80-%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E6%9F%A5%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87/02%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E5%B9%B3%E5%8F%B0.png" class title="百度地图API平台示意图"> 

<p>要使用的是图中所示“正/逆地理编码服务”。在使用服务前，需要登录百度账号（如果没有就注册一个），申请成为百度开发者，然后创建一个你自己的应用，就可以收到一个对应的服务密钥(AK)。在服务配置页面，有两种校验方式，一种是IP白名单方式，一种是sn校验方式。我根据文章<a href="https://www.cnblogs.com/liao-sir/p/8367683.html" target="_blank" rel="noopener"><br>python实现百度地图API获取某地址的经纬度</a>中的介绍，选择了sn校验方式，这样页面上会有SK。请将AK和SK两个序列码保存好，这就是你个人的验证信息。下一步使用百度地图API时要用到。</p>
<p>要编写的这个Python小程序实现的功能是：<strong>输入某个地址，得到相应的经纬度坐标信息</strong>。分三步实现：</p>
<ol>
<li>生成url（用于提交到API进行查询）</li>
<li>与API交互，查询并返回数据（json格式） </li>
<li>利用json解析并输出。</li>
</ol>
<p>下面分别介绍具体实现。</p>
<h3 id="1-sn码及url的生成"><a href="#1-sn码及url的生成" class="headerlink" title="1. sn码及url的生成"></a>1. sn码及url的生成</h3><p>url= <a href="http://api.map.baidu.com/geocoder/v2/?address=“输入的地点名”&amp;output=json&amp;ak=&#39;你的AK码&#39;&amp;sn=&#39;你的sn码&#39;。" target="_blank" rel="noopener">http://api.map.baidu.com/geocoder/v2/?address=“输入的地点名”&amp;output=json&amp;ak=&#39;你的AK码&#39;&amp;sn=&#39;你的sn码&#39;。</a><br>需要注意的是：</p>
<ul>
<li>由于url中有中文字符串，需要使用函数<code>urllib.parse.quote(inputstr, safe=&quot;/:=&amp;?#+!$,;&#39;@()*[]&quot;)</code>转换一下编码。</li>
<li>在url里output可以选择输出为json格式或xml格式，默认是xml格式。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,urllib.parse,urllib.error</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">MyAK=<span class="string">'这里请填入你的AK'</span></span><br><span class="line">MySK=<span class="string">'这里请填入你的SK'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    address = input(<span class="string">'输入地点：'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(address)&lt;<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#产生sn码</span></span><br><span class="line">    queryStr=<span class="string">"/geocoder/v2/?address="</span>+address+<span class="string">'&amp;output=json&amp;ak='</span>+MyAK</span><br><span class="line">    encodedStr=urllib.parse.quote(queryStr, safe=<span class="string">"/:=&amp;?#+!$,;'@()*[]"</span>)</span><br><span class="line">    rawStr=encodedStr+MySK</span><br><span class="line">    sn=(hashlib.md5(urllib.parse.quote_plus(rawStr).encode(<span class="string">"utf8"</span>)).hexdigest())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成url  </span></span><br><span class="line">    url=urllib.parse.quote(<span class="string">"http://api.map.baidu.com"</span>+queryStr+<span class="string">"&amp;sn="</span>+sn,safe=<span class="string">"/:=&amp;?#+!$,;'@()*[]"</span>)</span><br><span class="line">    print(<span class="string">'Retrieving'</span>,url)</span><br></pre></td></tr></table></figure>

<h3 id="2-输入url，利用urllib从API读取数据"><a href="#2-输入url，利用urllib从API读取数据" class="headerlink" title="2. 输入url，利用urllib从API读取数据"></a>2. 输入url，利用urllib从API读取数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从API读取数据</span></span><br><span class="line">uh=urllib.request.urlopen(url)</span><br><span class="line">data=uh.read().decode()</span><br><span class="line">print(<span class="string">'Retrieved'</span>,len(data),<span class="string">'characters'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="3-利用json对返回数据进行解析。"><a href="#3-利用json对返回数据进行解析。" class="headerlink" title="3. 利用json对返回数据进行解析。"></a>3. 利用json对返回数据进行解析。</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解析数据</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        js=json.loads(data)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        js=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> js <span class="keyword">or</span> <span class="string">'status'</span><span class="keyword">not</span> <span class="keyword">in</span> js <span class="keyword">or</span> js[<span class="string">'status'</span>]!=<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'======Failure===='</span>)</span><br><span class="line">        print(data)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(json.dumps(js,indent=<span class="number">4</span>,ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>
<p>以上代码可输出得到json格式的数据。例如，输入“百度大厦”后，程序输出的json格式数据如下所示：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"location"</span>: &#123;</span><br><span class="line">            <span class="attr">"lng"</span>: <span class="number">116.30695597357376</span>,</span><br><span class="line">            <span class="attr">"lat"</span>: <span class="number">40.05738753357608</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"precise"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"confidence"</span>: <span class="number">80</span>,</span><br><span class="line">        <span class="attr">"comprehension"</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">"level"</span>: <span class="string">"商务大厦"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，在这里一开始中文字符<code>&quot;商务大厦&quot;</code>不能正确显示，我从文章<a href="https://www.cnblogs.com/mingjiatang/p/9527345.html" target="_blank" rel="noopener">python中文编码&amp;json中文输出问题</a>中找到了答案，在<code>json.dumps()</code>函数中，默认转换为 ASCII 编码，中文字符就无法转换显示，因此在<code>json.dumps()</code>中要设置<code>ensure_ascii=False</code>。</p>
<p>最后，通过以下代码，可提取经纬度坐标等信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取经纬度坐标和地址类型</span></span><br><span class="line">lat=js[<span class="string">"result"</span>][<span class="string">"location"</span>][<span class="string">"lat"</span>]</span><br><span class="line">lng=js[<span class="string">"result"</span>][<span class="string">"location"</span>][<span class="string">"lng"</span>]</span><br><span class="line">print(<span class="string">'纬度'</span>,lat,<span class="string">'经度'</span>,lng)</span><br><span class="line">level=js[<span class="string">"result"</span>][<span class="string">"level"</span>]</span><br><span class="line">print(<span class="string">'地址类型'</span>,level)</span><br></pre></td></tr></table></figure>
<p>总结：按照规范发送 url 以及对返回 json 或 xml 格式数据正确解析，另外注意中文字符的编码问题，就可以上手API。怎么样？你也快来试试吧！</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Python编程之API入门：二 Python3中使用新浪微博API</title>
    <url>/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%BA%8C-Python3%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI/</url>
    <content><![CDATA[<h4 id="回顾API使用流程"><a href="#回顾API使用流程" class="headerlink" title="回顾API使用流程"></a>回顾API使用流程</h4><p>在上一篇文章“Python编程之API入门：一 使用百度地图API查地理坐标”中，通过百度地图API的使用，我们看到API调用的一般流程为：生成API规定格式的url-&gt;通过urllib读取url中数据-&gt;对json格式的数据进行解析。下一步，让我们开始研究新浪微博API的使用吧！</p>
<a id="more"></a>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p><a href="https://open.weibo.com/wiki/API" target="_blank" rel="noopener">新浪微博开放平台</a>是新浪微博API的使用平台。</p>
<img src="/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%BA%8C-Python3%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI/03%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI.png" class title="新浪微博开放平台示意图">
<p>用微博账号登录该平台后，申请成为开发者，创建一个新应用后会得到唯一的App Key和App Secret。（注：应用不需要提交审核，只要创建新应用系统就会分配 Key 和 Secret ）在”我的应用/应用信息/基本信息”中也可以查到这两个信息。在这一页面中还有”我的应用/应用信息/高级信息“一项，点击进入并设置OAuth2.0授权回调页相关信息，如果不知道填什么好，可以设置为默认回调页：<a href="https://api.weibo.com/oauth2/default.html。" target="_blank" rel="noopener">https://api.weibo.com/oauth2/default.html。</a>  <strong>这三项信息都是后面需要用到的，请复制保存到文档。</strong></p>
<h4 id="微博API新特点"><a href="#微博API新特点" class="headerlink" title="微博API新特点"></a>微博API新特点</h4><p>与百度地图API相比，新浪微博API增加了OAuth2.0协议用于用户身份验证和授权。这里仅作简要说明（感兴趣的同学请查看网上文档示意图）：通过该协议，第三方应用可以获得用户授权，然后用该许可从授权服务器获得令牌(Token)，用于后续从API服务器查询数据时验证身份。</p>
<img src="/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%BA%8C-Python3%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI/03oAuth2.png" class title="OAuth2.0协议示意图">
<p>这一验证环节增加了url生成的复杂度，好在网站上已经有廖雪峰老师提供的SDK工具包:<a href="https://github.com/michaelliao/sinaweibopy" target="_blank" rel="noopener">sinaweibopy</a>（廖老师的github地址好像改过名字，因此网上很多旧链接无效，这个是新的有效链接），但是这一程序是基于Python2环境编写的，Python3有些系统库有更改，程序调用时经常报错。而作为Python入门者，改写程序以适应Python3环境无疑是一件困难的事。幸好有大神做了这一工作，感谢owolf针对Python3改写的SDK:<a href="https://github.com/olwolf/sinaweibopy3" target="_blank" rel="noopener">sinaweibopy3</a>，我使用过，正常运行，大家可以下载。在这里同时推荐owolf的文章<a href="https://www.jianshu.com/p/7c68f3ca73ed" target="_blank" rel="noopener">全网最详：python3调用新浪微博API接口获取数据</a>。</p>
<h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><p>下面介绍一下我使用新浪微博API的过程，为新入门的同学提供参考。</p>
<h5 id="1-参数设置"><a href="#1-参数设置" class="headerlink" title="1.参数设置"></a>1.参数设置</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sinaweibopy3</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">APP_KEY =<span class="string">' 填入你的App Key'</span>  </span><br><span class="line">APP_SECRET=<span class="string">' 填入你的App Secret'</span></span><br><span class="line">REDIRECT_URL =<span class="string">' 填入你的授权回调页'</span></span><br></pre></td></tr></table></figure>
<p>注：</p>
<ul>
<li>该文件需要和sinaweibopy3.py放在同一个文件夹里。</li>
<li>填写的三项信息都是在<strong>准备</strong>中提到的信息。</li>
</ul>
<p>这里谈谈我粗心大意造成的一个bug，也给大家提个醒。一开始我运行程序时，每次都出现“重定向地址不匹配”的错误信息：</p>
<blockquote>
<p>用微博帐号登录出错了！对第三方应用进行授权时出现错误，请您联系第三方应用的开发者：XXX 或者稍后再试。<br>错误码：21322  重定向地址不匹配</p>
</blockquote>
<p>查找网上的解决方法，要设置回调页，但是在前面的步骤里我已经设置了，怎么还会有这个问题？后来看到一篇文章中提到回调页地址和程序中的REDIRECT_URL要一致，我想到了程序示例是<a href="http://api.weibo.com/oauth2/default.html，" target="_blank" rel="noopener">http://api.weibo.com/oauth2/default.html，</a>  用的是<code>http:</code>开头，我在填写时看到地址一样，就没有改动，而网站上是<code>https:</code>开头，一个<code>&#39;s&#39;</code>之差，当时觉得是一个地址，没想到相差大矣！</p>
<h5 id="2-OAuth2-0验证生成url"><a href="#2-OAuth2-0验证生成url" class="headerlink" title="2.OAuth2.0验证生成url"></a>2.OAuth2.0验证生成url</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">client = sinaweibopy3.APIClient(app_key=APP_KEY, app_secret=APP_SECRET, redirect_uri=REDIRECT_URL)</span><br><span class="line">url = client.get_authorize_url()</span><br><span class="line">webbrowser.open_new(url)</span><br><span class="line">result = client.request_access_token(input(<span class="string">"please input code: "</span>))</span><br><span class="line">client.set_access_token(result.access_token, result.expires_in)</span><br></pre></td></tr></table></figure>
<p>注意：这就是调用sinaweibopy3，实现OAuth2.0中用户授权-&gt;获取Token这一过程。当程序运行到<code>client.request_access_token</code>时，会弹出输入提示”please input code: “，要求输入code？这是什么意思呢？打开浏览器就会看到出现了OAuth2.0验证回调页，地址栏一项<code>&#39;code=&#39;</code>后面有一串字符，这就是我们要的Token信息，把它复制后粘贴输入，程序继续运行。</p>
<h5 id="3-从API读取数据"><a href="#3-从API读取数据" class="headerlink" title="3.从API读取数据"></a>3.从API读取数据</h5><p>运行下列代码，可以读取公共微博的数据并显示结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result=client.public_timeline()</span><br><span class="line">print(json.dumps(result,indent=<span class="number">2</span>,ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>
<p>而通过查看数据结构，可以提取特定信息。例如，可以通过以下代码，输出用户微博昵称、地点和最新微博正文。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number=result[<span class="string">"total_number"</span>]</span><br><span class="line">print(number,<span class="string">"users:"</span>)</span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> result[<span class="string">"statuses"</span>]:</span><br><span class="line">    print(u[<span class="string">"user"</span>][<span class="string">"screen_name"</span>])</span><br><span class="line">    print(u[<span class="string">"user"</span>][<span class="string">"location"</span>])</span><br><span class="line">    print(u[<span class="string">"text"</span>])</span><br></pre></td></tr></table></figure>
<h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p>如果要查询其他信息，比如获取用户的关注列表，怎么办呢？让我们来试着编写出相应的函数。</p>
<h5 id="1-查看函数信息"><a href="#1-查看函数信息" class="headerlink" title="1.查看函数信息"></a>1.查看函数信息</h5><p>在新浪微博API中指定的url: <a href="https://api.weibo.com/2/friendships/friends.json" target="_blank" rel="noopener">https://api.weibo.com/2/friendships/friends.json</a></p>
<img src="/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%BA%8C-Python3%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI/03url.png" class title="查询用户关注列表的url">

<p>以及定义的请求参数是：access_token, uid, screen_name, count, cursor, time_status。</p>
<img src="/2020/04/18/Python%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%85%A5%E9%97%A8%EF%BC%9A%E4%BA%8C-Python3%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9AAPI/03parameters.png" class title="函数定义的请求参数信息">
<p>其中，access_token需要填写，uid和screen_name分别是用户id和昵称，二者必填且只填一项。（注：接口升级后，只能为当前授权用户） count, cursor可使用默认参数。count是单页返回记录条数，默认为5，最大不超过5，cursor返回结果的游标。trim_status是显示status字段的开关，0：返回完整status字段，1：仅返回status_id，默认为1。</p>
<h5 id="2-编写fs-friends-函数"><a href="#2-编写fs-friends-函数" class="headerlink" title="2.编写fs_friends()函数"></a>2.编写<code>fs_friends()</code>函数</h5><p>首先查看一下，在sinaweibopy3.py中是如何实现<code>public_timeline()</code>呢?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">public_timeline</span><span class="params">(self)</span>:</span>       </span><br><span class="line">        result = _http_get(<span class="string">'%s'</span>% (self.api_url)  + <span class="string">'statuses/public_timeline.json'</span>,</span><br><span class="line">                           access_token=self.access_token, </span><br><span class="line">                           count=<span class="number">50</span>, </span><br><span class="line">                           page=<span class="number">1</span>, </span><br><span class="line">                           base_app=<span class="number">0</span>,</span><br><span class="line">                )</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p>对照代码发现<code>%s&#39;% (self.api_url)</code>就是<code>https://api.weibo.com/2</code>，因此，我们只需要把 <code>&#39;statuses/public_timeline.json&#39;</code>改成<code>&#39;friendships/friends.json&#39;</code>，并添加必填的请求参数，就可以写出一个所需要的<code>fs_friends()</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fs_friends</span><span class="params">(self)</span>:</span></span><br><span class="line">        result=_http_get(<span class="string">'%s'</span>% (self.api_url)  + <span class="string">'friendships/friends.json'</span>, </span><br><span class="line">                           access_token=self.access_token, </span><br><span class="line">                           screen_name=<span class="string">'填入你自己的微博昵称'</span> ,</span><br><span class="line">                           trim_status=<span class="number">0</span>,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p>注：trim_status默认为1，设置为0才会得到完整status字段（其中包括最新微博正文）。</p>
<h5 id="3-在主程序中调用fs-friends-函数"><a href="#3-在主程序中调用fs-friends-函数" class="headerlink" title="3.在主程序中调用fs_friends()函数"></a>3.在主程序中调用<code>fs_friends()</code>函数</h5><p>参考原有的<code>client.public_timeline()</code>，得到以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = client.fs_friends()</span><br><span class="line">print(json.dumps(result,indent=<span class="number">2</span>,ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>
<p>这样就可以看到关注的人的列表，包括基本信息及最新微博。</p>
<p>进一步地，可以通过以下代码，提取最新微博内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> result[<span class="string">'users'</span>]:</span><br><span class="line">    print(<span class="string">"\n"</span>,u[<span class="string">'screen_name'</span>])</span><br><span class="line">    print(u[<span class="string">'location'</span>])</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">'status'</span> <span class="keyword">not</span> <span class="keyword">in</span> u):</span><br><span class="line">        print(<span class="string">'not found\n'</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(u[<span class="string">'status'</span>][<span class="string">'text'</span>])</span><br></pre></td></tr></table></figure>
<h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p><strong>以下是我还在思考的问题，欢迎交流指教，谢谢！</strong><br>1、请求参数设置里count不大于5，我在实际运行程序时只看到4个关注用户及微博正文，能否读取更多用户，如何读取？<br>2、我还尝试了编写statuses/home_timeline(获取当前登录用户及其所关注（授权）用户的最新微博)的查询函数，但是因为参数设置问题，显示结果为Null（空）。我认为问题出在max_id参数上，说明中指出：若指定此参数，则返回ID小于或等于max_id的微博，默认为0，但是设多大合理？我有些困惑。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>写作前的思考：Why&amp;How</title>
    <url>/2020/04/18/%E5%86%99%E4%BD%9C%E5%89%8D%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%9AWhy&amp;How/</url>
    <content><![CDATA[<p>经过一番努力，终于在github上建了这个博客小站。趁着现在仍然对写作抱有兴趣和热情，我记录下写作以及建立这个小站的初衷，以后动力不足时可以看一下充电。</p>
<a id="more"></a>
<img src="/2020/04/18/%E5%86%99%E4%BD%9C%E5%89%8D%E7%9A%84%E6%80%9D%E8%80%83%EF%BC%9AWhy&How/writing.jpg" class title="Photo by Andrew Neel from Pexels">
<p>我最近在看fast.ai创始人Jeremy Howard老师的机器学习课程视频，其中他多次推荐博客写作。他认为，写技术博客可以很好地理解和运用知识。其中给我最大的启发就是技术博客的写作角度。在此之前，我一直认为，只有我对某个领域很懂，才可以写一些文章来帮助别人。其实不然。虽然我是新手小白，但是如果我弄懂了一个问题，就可以总结分享出来，帮助以后入门的小白。而且，新手小白反而更能理解新手容易遇到的困惑和问题。另外，这个博客可以作为学习笔记使用，整理知识点，方便自己日后查阅。而当别人遇到同样的问题需要解答时，也可发送博客文章给对方，高效地分享知识。</p>
<p>平时我喜欢读书、语言学习、听轻音乐等。最近两三年我加大了英文原著阅读量，同时也对英文有声书兴趣正浓。因此，这个博客小站里也有一部分文章是写技术之外的兴趣爱好：书评、英语学习笔记、…。</p>
<p>坚持写作，思考、表达，不断完善、不断提高。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
